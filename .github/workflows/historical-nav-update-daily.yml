name: Update and Publish Historical Nav Data
on:
  schedule:
    - cron: '0 0 * * *'
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      from_date:
        description: 'Start date for data update (YYYY-MM-DD)'
        required: false
        type: string
      to_date:
        description: 'End date for data update (YYYY-MM-DD)'
        required: false
        type: string

permissions:
  contents: write
  id-token: write
  packages: write

jobs:
  update-and-build:
    name: Update data and build artifacts
    runs-on: ubuntu-latest
    timeout-minutes: 720
    outputs:
      release_version: ${{ steps.current-time.outputs.formattedTime }}
      data_stats: ${{ steps.generate-stats.outputs.stats }}
    steps:
      - name: Get current date
        uses: josStorer/get-current-time@v2
        id: current-time
        with:
          format: "YYYYMMDD"
          timezone: 'Asia/Kolkata'
      
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - uses: graalvm/setup-graalvm@v1
        with:
          distribution: 'graalvm'
          java-version: 21
          cache: 'gradle'
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          cache: 'pip'
      - name: Install Python dependencies
        run: |
          python3 -m pip install --upgrade pip
          pip install -r requirements.txt
        working-directory: ${{ github.workspace }}
      
      - name: Update data
        run: |
          if [[ -n "${{ github.event.inputs.from_date }}" && -n "${{ github.event.inputs.to_date }}" ]]; then
            echo "Running fetch.py with range: ${{ github.event.inputs.from_date }} to ${{ github.event.inputs.to_date }}"
            python3 fetch.py "${{ github.event.inputs.from_date }}" "${{ github.event.inputs.to_date }}"
          else
            echo "Running fetch.py with default behavior (no date range)"
            python3 fetch.py
          fi
        working-directory: ${{ github.workspace }}
      
      - name: Commit data updates
        uses: stefanzweifel/git-auto-commit-action@v6
        id: commit
        with:
          commit_message: Update Historical Data ${{ steps.current-time.outputs.formattedTime }}
          commit_author: 'github-actions[bot] <github-actions[bot]@users.noreply.github.com>'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Generate database and extract statistics
        id: generate-stats
        run: |
          echo "Generating database..."
          python generate.py
          
          echo "Extracting statistics..."
          DATA_COVERAGE_MIN=$(sqlite3 funds.db 'SELECT MIN(date) FROM nav')
          DATA_COVERAGE_MAX=$(sqlite3 funds.db 'SELECT MAX(date) FROM nav')
          TOTAL_SCHEMES=$(sqlite3 funds.db 'SELECT COUNT(*) FROM schemes')
          TOTAL_NAV_RECORDS=$(sqlite3 funds.db 'SELECT COUNT(*) FROM nav')
          TOTAL_SECURITIES=$(sqlite3 funds.db 'SELECT COUNT(*) FROM securities')
          
          # Store stats in outputs for reuse
          cat > stats.json << EOF
          {
            "data_coverage_min": "$DATA_COVERAGE_MIN",
            "data_coverage_max": "$DATA_COVERAGE_MAX", 
            "total_schemes": "$TOTAL_SCHEMES",
            "total_nav_records": "$TOTAL_NAV_RECORDS",
            "total_securities": "$TOTAL_SECURITIES"
          }
          EOF
          echo "stats=$(cat stats.json | jq -c .)" >> "$GITHUB_OUTPUT"
          
          echo "Compressing database..."
          zstd -5 -T0 funds.db
          
          echo "Generating SQL dump..."
          sqlite3 funds.db .dump > funds.sql

          # Print size of funds.sql in MB
          echo "Size of funds.sql: $(awk 'BEGIN {printf "%.2f", (system(\"stat -c %s funds.sql\")/1024/1024)}') MB (using stat)"
          if [ -f funds.sql ]; then
            SIZE_BYTES=$(stat -c %s funds.sql)
            SIZE_MB=$(awk "BEGIN {printf \"%.2f\", $SIZE_BYTES/1024/1024}")
            echo "funds.sql size: $SIZE_MB MB ($SIZE_BYTES bytes)"
          else
            echo "funds.sql not found!"
          fi
      
      - name: Build Java Library
        run: |
          echo "Preparing resources..."
          mkdir -p src/main/resources/
          cp funds.sql src/main/resources/
          
          echo "Updating version in build.gradle..."
          sed -i "s/version = '1.0.[0-9]\{8\}'/version = '1.0.${{ steps.current-time.outputs.formattedTime }}'/" build.gradle
          
          echo "Building with Gradle..."
          ./gradlew clean build -x test --parallel -Pci=true
          
          echo "Copying JAR artifact..."
          JAR_FILE=$(find build/libs -name "historical-mf-nav-data-*-plain.jar" -not -name "*-sources.jar" -not -name "*-javadoc.jar" | head -1)
          if [ -z "$JAR_FILE" ]; then
            echo "ERROR: Main JAR file not found"
            ls -la build/libs/
            exit 1
          fi
          cp "$JAR_FILE" historical-mf-nav-data-library.jar
          
          echo "Verifying JAR contents..."
          jar tf historical-mf-nav-data-library.jar | grep -q funds.sql || { echo "ERROR: funds.sql not found in JAR"; exit 1; }
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            historical-mf-nav-data-library.jar
            funds.db.zst
            stats.json
          retention-days: 7

  release:
    name: Create GitHub Release
    needs: update-and-build
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' }}
    outputs:
      release_version: ${{ needs.update-and-build.outputs.release_version }}
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
      
      - name: Create Release Notes
        run: |
          # Parse stats from JSON
          DATA_COVERAGE_MIN=$(echo '${{ needs.update-and-build.outputs.data_stats }}' | jq -r .data_coverage_min)
          DATA_COVERAGE_MAX=$(echo '${{ needs.update-and-build.outputs.data_stats }}' | jq -r .data_coverage_max)
          TOTAL_SCHEMES=$(echo '${{ needs.update-and-build.outputs.data_stats }}' | jq -r .total_schemes)
          TOTAL_NAV_RECORDS=$(echo '${{ needs.update-and-build.outputs.data_stats }}' | jq -r .total_nav_records)
          TOTAL_SECURITIES=$(echo '${{ needs.update-and-build.outputs.data_stats }}' | jq -r .total_securities)
          
          cat > release_notes.txt << EOF
          # Daily NAV Library v1.0.${{ needs.update-and-build.outputs.release_version }}
          
          Historical Mutual Fund NAV Data for India - Auto-configuring Spring Boot Library
          
          ## ðŸš€ What's New
          - Complete historical NAV data up to ${{ needs.update-and-build.outputs.release_version }}
          - Self-executing JAR with embedded SQLite database
          - Zero-configuration Spring Boot auto-configuration
          - Optimized indexes for fast querying
          
          ## ðŸ“¦ Artifacts
          - `historical-mf-nav-data-library.jar` - Complete library with embedded data (recommended)
          - `funds.db.zst` - Compressed database file (for direct SQLite usage)
          
          ## ðŸ”§ Usage
          Add to your Maven project:
          ```xml
          <dependency>
              <groupId>com.github.rajadilipkolli</groupId>
              <artifactId>historical-mf-nav-data</artifactId>
              <version>1.0.${{ needs.update-and-build.outputs.release_version }}</version>
          </dependency>
          ```
          
          See [README.md](https://github.com/rajadilipkolli/historical-mf-nav-data/blob/main/README.md) for complete documentation.
          
          ## ðŸ“Š Data Statistics
          - Data coverage: ${DATA_COVERAGE_MIN} to ${DATA_COVERAGE_MAX}
          - Total schemes: ${TOTAL_SCHEMES}
          - Total NAV records: ${TOTAL_NAV_RECORDS}
          - Total securities: ${TOTAL_SECURITIES}
          EOF
      
      - name: Create GitHub Release
        run: |
          # Ensure .git exists (required for gh release)
          if [ ! -d .git ]; then
            git init
            git remote add origin "https://github.com/${{ github.repository }}.git"
            git fetch origin main --depth=1
            git checkout main
          fi

          # Check JAR file size (must be <= 2GB for GitHub Releases)
          JAR_SIZE=$(stat --format="%s" historical-mf-nav-data-library.jar)
          MAX_SIZE=2147483648
          if [ "$JAR_SIZE" -gt "$MAX_SIZE" ]; then
            echo "ERROR: historical-mf-nav-data-library.jar is too large for GitHub Releases (size: $JAR_SIZE bytes, max: $MAX_SIZE bytes)."
            echo "Please reduce the size of the JAR or split the artifact."
            exit 1
          fi

          gh release create "v1.0.${{ needs.update-and-build.outputs.release_version }}" \
            --title "Daily NAV Library v1.0.${{ needs.update-and-build.outputs.release_version }}" \
            --notes-file release_notes.txt \
            historical-mf-nav-data-library.jar \
            funds.db.zst
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish:
    name: Publish to Maven Central
    needs: [update-and-build, release]
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' }}
    steps:
      - name: Checkout code (minimal for build files only)
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          sparse-checkout: |
            build.gradle
            settings.gradle
            gradle/
            src/main/
          sparse-checkout-cone-mode: false
      
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
      
      - name: Prepare resources for Maven Central build
        run: |
          # Extract database and create SQL dump
          zstd -d funds.db.zst
          sqlite3 funds.db .dump > funds.sql
          mkdir -p src/main/resources/
          cp funds.sql src/main/resources/
      
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'gradle'
      
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          gradle-version: wrapper
          cache-read-only: false
      
      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}
          git_config_global: false
          git_user_signingkey: false
          git_commit_gpgsign: false
          git_tag_gpgsign: false
          git_push_gpgsign: if-asked
      
      - name: Build and publish to Maven Central
        run: |
          VERSION="1.0.${{ needs.update-and-build.outputs.release_version }}"
          sed -i "s/version = '1.0.0-SNAPSHOT'/version = '$VERSION'/" build.gradle
          sed -i "s/version = '1.0.[0-9]\{8\}'/version = '$VERSION'/" build.gradle
          ./gradlew build jreleaserDeploy --no-daemon --stacktrace --parallel -Pci=true
        env:
          JRELEASER_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          JRELEASER_OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          JRELEASER_OSSRH_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}
          GRADLE_OPTS: "-Dorg.gradle.jvmargs=-Xmx2g -XX:MaxMetaspaceSize=512m -XX:+UseParallelGC"
