plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.4'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'maven-publish'
    id 'com.diffplug.spotless' version '7.2.1'
    id 'jacoco'
    id 'org.jreleaser' version '1.19.0'
    id 'org.graalvm.buildtools.native' version '0.11.0'
}

group = 'com.github.rajadilipkolli'
version = '1.0.20250713'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
    withJavadocJar()
    withSourcesJar()
}

repositories {
    mavenCentral()
}

// GraalVM Native Image configuration
graalvmNative {
    binaries {
        main {
            imageName = 'historical-mf-nav-data-native'
            buildArgs.add('--no-fallback')
            buildArgs.add('--enable-http')
            buildArgs.add('--enable-https')
            buildArgs.add('--install-exit-handlers')
            // Add more buildArgs as needed for reflection/configuration
        }
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-autoconfigure'
    implementation 'org.xerial:sqlite-jdbc:3.50.3.0'
    implementation 'org.springframework:spring-jdbc'
    implementation 'com.fasterxml.jackson.core:jackson-databind'
    implementation 'org.slf4j:slf4j-api'
    implementation 'com.github.luben:zstd-jni:1.5.7-4'
    
    compileOnly 'org.springframework.boot:spring-boot-starter'
    compileOnly 'org.springframework.boot:spring-boot-starter-actuator'
    compileOnly 'org.springframework.boot:spring-boot-starter-web'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    // For testing with Spring MVC
    testImplementation('org.springframework:spring-webmvc')
    testImplementation('jakarta.servlet:jakarta.servlet-api')
    testImplementation('com.fasterxml.jackson.datatype:jackson-datatype-jsr310')
}

jar {
    from('src/main/resources') {
        include 'funds.db.zst'
    }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    // Optimize compression for CI builds
    if (project.hasProperty('ci')) {
        archiveClassifier = 'plain'
        enabled = true
        destinationDirectory = file("$buildDir/libs")
        entryCompression = ZipEntryCompression.STORED // Faster builds in CI
    }
}

// Optimize build performance
tasks.withType(JavaCompile) {
    options.incremental = true
    options.fork = true
    options.forkOptions.jvmArgs += ['-Xmx2g']
}

tasks.withType(Test) {
    maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
    forkEvery = 100
}

// Add parallel builds optimization
gradle.projectsEvaluated {
    tasks.withType(JavaCompile) {
        options.compilerArgs += ['--enable-preview'] // if using preview features
    }
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
    finalizedBy jacocoTestCoverageVerification
}

jacoco {
    toolVersion = "0.8.13"
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        html.required = true
    }
    afterEvaluate {
        classDirectories.setFrom(
            files(classDirectories.files.collect {
                fileTree(dir: it, exclude: ['com/github/rajadilipkolli/dailynav/example/**'])
            })
        )
    }
}

jacocoTestCoverageVerification {
    afterEvaluate {
        classDirectories.setFrom(
            files(classDirectories.files.collect {
                fileTree(dir: it, exclude: ['com/github/rajadilipkolli/dailynav/example/**'])
            })
        )
    }
    violationRules {
        rule {
            limit {
                minimum = 0.80
            }
        }
    }
}

spotless {
    java {
        googleJavaFormat('1.27.0')
        target 'src/**/*.java'
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
            
            pom {
                name = 'Historical Mutual Fund NAV Data'
                description = 'Historical Mutual Fund NAV Data for India - Auto-configuring Spring Boot Library'
                url = 'https://github.com/rajadilipkolli/historical-mf-nav-data'
                
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://opensource.org/licenses/MIT'
                    }
                }
                
                developers {
                    developer {
                        id = 'rajadilipkolli'
                        name = 'Raja Kolli'
                        email = 'rajadileepkolli@gmail.com'
                    }
                }
                
                scm {
                    connection = 'scm:git:git://github.com/rajadilipkolli/historical-mf-nav-data.git'
                    developerConnection = 'scm:git:ssh://github.com:rajadilipkolli/historical-mf-nav-data.git'
                    url = 'https://github.com/rajadilipkolli/historical-mf-nav-data'
                }
            }
        }
    }
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/rajadilipkolli/historical-mf-nav-data")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("USERNAME")
                password = project.findProperty("gpr.key") ?: System.getenv("TOKEN")
            }
        }
    }
}

jreleaser {
    project {
        name = 'historical-mf-nav-data'
        description = 'Historical Mutual Fund NAV Data for India - Auto-configuring Spring Boot Library'
        longDescription = 'Complete historical NAV data for Indian mutual funds with Spring Boot auto-configuration and embedded SQLite.'
        website = 'https://github.com/rajadilipkolli/historical-mf-nav-data'
        authors = ['Raja Kolli']
        license = 'MIT'
        inceptionYear = '2024'
        tags = ['mutual-funds', 'nav-data', 'india', 'spring-boot', 'finance']
    }
    release {
        github {
            enabled = true
            owner = 'rajadilipkolli'
            repo = 'historical-mf-nav-data'
            tagName = 'v1.0.${project.version}'
            releaseName = 'Daily NAV Library v1.0.${project.version}'
            draft = false
            prerelease = false
        }
    }
    deploy {
        maven {
            mavenCentral {
                active = 'ALWAYS'
                credentials {
                    username = System.getenv('JRELEASER_OSSRH_USERNAME')
                    password = System.getenv('JRELEASER_OSSRH_PASSWORD')
                }
            }
        }
    }
    signing {
        active = 'ALWAYS'
        armored = true
        publicKey = System.getenv('JRELEASER_GPG_PUBLIC_KEY') ?: project.findProperty('jreleaser.gpg.public.key')
        secretKey = System.getenv('JRELEASER_GPG_SECRET_KEY') ?: project.findProperty('jreleaser.gpg.secret.key')
        passphrase = System.getenv('JRELEASER_GPG_PASSPHRASE') ?: project.findProperty('jreleaser.gpg.passphrase')
    }
}
